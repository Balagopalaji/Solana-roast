import * as fs from 'fs';
import * as path from 'path';

async function sleep(ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function getNgrokUrl(retries = 10, delay = 1000): Promise<string> {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await fetch('http://localhost:4040/api/tunnels');
      if (!response.ok) {
        throw new Error('Ngrok API not available');
      }
      
      const tunnels = await response.json() as { tunnels: Array<{ public_url: string }> };
      const url = tunnels.tunnels[0]?.public_url;
      
      if (!url) {
        throw new Error('No active ngrok tunnels found');
      }
      
      return url;
    } catch (error) {
      if (attempt === retries) {
        console.error('‚ùå Failed to get ngrok URL after', retries, 'attempts');
        console.error('Error:', error instanceof Error ? error.message : String(error));
        console.error('\n‚ö†Ô∏è  Please ensure ngrok is running:');
        console.error('1. Start ngrok: ngrok http 5173');
        console.error('2. Try again: npm run check:ngrok');
        process.exit(1);
      }
      console.log(`Attempt ${attempt}/${retries}: Waiting for ngrok to start...`);
      await sleep(delay);
    }
  }
  throw new Error('Failed to get ngrok URL');
}

async function checkNgrokAndUpdateEnv(ngrokUrl: string) {
  const envPath = path.join(__dirname, '../packages/frontend/.env.development');
  const envContent = `# Auto-generated by check-ngrok.ts
VITE_API_URL=${ngrokUrl}
VITE_ENABLE_TWITTER=true
VITE_TWITTER_CALLBACK_URL=${ngrokUrl}/api/twitter/callback
`;

  fs.writeFileSync(envPath, envContent);
  console.log(`\n‚úÖ Updated ${envPath} with ngrok URL: ${ngrokUrl}`);
  console.log('\n‚ö†Ô∏è  Remember to update Twitter Developer Portal:');
  console.log(`1. Website URL: ${ngrokUrl}`);
  console.log(`2. Callback URL: ${ngrokUrl}/api/twitter/callback`);
}

// Run the script
(async () => {
  try {
    console.log('üîç Checking ngrok status...');
    const url = await getNgrokUrl();
    await checkNgrokAndUpdateEnv(url);
  } catch (error) {
    console.error('‚ùå Script failed:', error instanceof Error ? error.message : String(error));
    process.exit(1);
  }
})(); 